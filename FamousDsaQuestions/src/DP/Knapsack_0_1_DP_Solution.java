package DP;

import java.util.Scanner;

public class Knapsack_0_1_DP_Solution {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter max capacity of bag ");
		int bagMaxWt = sc.nextInt();
		System.out.println("Enter number of elements in bag ");
		int numberOfEle = sc.nextInt();
		int wt[] = new int[bagMaxWt];
		int val[] = new int[numberOfEle];// val is value/cost/profit of each item
		for (int i = 0; i < numberOfEle; i++) {
			System.out.println("Enter weight and val of " + i + " item:");
			wt[i] = sc.nextInt();
			val[i] = sc.nextInt();
		}

		System.out.println("wt val");
		for (int i = 0; i < numberOfEle; i++) {
			System.out.println(wt[i] + " " + val[i]);
		}

		int solDp[][] = knapsackDp(wt, val, bagMaxWt, numberOfEle);
		System.out.println("Solution is " + solDp[numberOfEle][bagMaxWt]);// last cell has the answer
	}

	public static int[][] knapsackDp(int wt[], int val[], int bagMaxWt, int numberOfEle) {
		int dp[][] = new int[numberOfEle + 1][bagMaxWt + 1];// since we start from 0 which signifies no element picked

		// no need to preprocess cause initial value in matrix are 0 only so simply skip
		// the cells which are base case

		for (int i = 1; i < dp.length; i++) {// i=1 cause basically 1st row and column are 0 (cause they are base
												// case)
												// so we will use the
												// value of these cells to calculate others but no need to run dp
												// for
												// 1st row and col
			for (int j = 1; j < dp[i].length; j++) {
				if (wt[i - 1] <= j) {// i - 1 cause we doing bagMaxWt+1 in dp array cause we adding 1 col for base
										// case , so
										// since 1 row increased in dp array but our "wt" array is still same so
										// basically i value in dp array is i-1 value in "wt" and "val" array

					
					// now we store max of the profit generated by excluding current ele or including current ele
					dp[i][j] = Math.max(dp[i - 1][j], val[i - 1] + dp[i - 1][j - wt[i - 1]]);// j - wt[i - 1] means
																								// going in the row
																								// which has capacity of bag =
																								// j - wt[i - 1] , i.e.
																								// current capacity of
																								// bag (i.e. j) - weight
																								// of current
																								// element(i.e. wt[i-1])

				} else {// means weight of current element is more than current capacity so it means we
						// dont add current ele to answer so simply add value of above cell 
					dp[i][j] = dp[i - 1][j];
				}
			}
		}
		return dp;
	}

}
